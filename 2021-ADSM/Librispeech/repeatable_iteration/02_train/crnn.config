#!rnn.py

batch_size = 10000
batching = 'random'
cache_size = '0'
cleanup_old_models = True
device = 'gpu'
gradient_clip = 0
gradient_noise = 0.1
learning_rate = 0.001
learning_rate_control = 'newbob_multi_epoch'
learning_rate_control_min_num_epochs_per_new_lr = 3
learning_rate_control_relative_error_relative_lr = True
learning_rate_file = 'learning_rates'
# constant for pretrain
learning_rates = [ 0.001,
  0.001,
  0.001,
  0.001,
  0.001,
  0.001,
  0.001,
  0.001,
  0.001,
  0.001,
  0.001,
  0.001,
  0.001,
  0.001,
  0.001,
  0.001,
  0.001,
  0.001,
  0.001,
  0.001,
  0.001,
  0.001,
  0.001,
  0.001,
  0.001,
  0.001,
  0.001,
  0.001,
  0.001,
  0.001,
  0.001,
  0.001,
  0.001,
  0.001,
  0.001,
  0.001,
  0.001,
  0.001,
  0.001,
  0.001,
  0.001,
  0.001,
  0.001,
  0.001,
  0.001,
  0.001,
  0.001,
  0.001]
log = ['./crnn.log']
log_verbosity = 3
max_seqs = 128
min_learning_rate = 1e-05
model = 'models/epoch' # save checkpoints
multiprocessing = True
nadam = True
network = { 'bwd_lstm_1': {'L2': 0.01, 'class': 'rec', 'direction': -1, 'dropout': 0.1, 'from': 'source', 'n_out': 512, 'unit': 'nativelstm2'},
  'bwd_lstm_2': { 'L2': 0.01,
                  'class': 'rec',
                  'direction': -1,
                  'dropout': 0.1,
                  'from': ['fwd_lstm_1', 'bwd_lstm_1'],
                  'n_out': 512,
                  'unit': 'nativelstm2'},
  'bwd_lstm_3': { 'L2': 0.01,
                  'class': 'rec',
                  'direction': -1,
                  'dropout': 0.1,
                  'from': ['fwd_lstm_2', 'bwd_lstm_2'],
                  'n_out': 512,
                  'unit': 'nativelstm2'},
  'bwd_lstm_4': {'L2': 0.01, 'class': 'rec', 'direction': -1, 'dropout': 0.1, 'from': 'max_pool_3', 'n_out': 512, 'unit': 'nativelstm2'},
  'bwd_lstm_5': { 'L2': 0.01,
                  'class': 'rec',
                  'direction': -1,
                  'dropout': 0.1,
                  'from': ['fwd_lstm_4', 'bwd_lstm_4'],
                  'n_out': 512,
                  'unit': 'nativelstm2'},
  'bwd_lstm_6': { 'L2': 0.01,
                  'class': 'rec',
                  'direction': -1,
                  'dropout': 0.1,
                  'from': ['fwd_lstm_5', 'bwd_lstm_5'],
                  'n_out': 512,
                  'unit': 'nativelstm2'},
  'fwd_lstm_1': {'L2': 0.01, 'class': 'rec', 'direction': 1, 'dropout': 0.1, 'from': 'source', 'n_out': 512, 'unit': 'nativelstm2'},
  'fwd_lstm_2': { 'L2': 0.01,
                  'class': 'rec',
                  'direction': 1,
                  'dropout': 0.1,
                  'from': ['fwd_lstm_1', 'bwd_lstm_1'],
                  'n_out': 512,
                  'unit': 'nativelstm2'},
  'fwd_lstm_3': { 'L2': 0.01,
                  'class': 'rec',
                  'direction': 1,
                  'dropout': 0.1,
                  'from': ['fwd_lstm_2', 'bwd_lstm_2'],
                  'n_out': 512,
                  'unit': 'nativelstm2'},
  'fwd_lstm_4': {'L2': 0.01, 'class': 'rec', 'direction': 1, 'dropout': 0.1, 'from': 'max_pool_3', 'n_out': 512, 'unit': 'nativelstm2'},
  'fwd_lstm_5': { 'L2': 0.01,
                  'class': 'rec',
                  'direction': 1,
                  'dropout': 0.1,
                  'from': ['fwd_lstm_4', 'bwd_lstm_4'],
                  'n_out': 512,
                  'unit': 'nativelstm2'},
  'fwd_lstm_6': { 'L2': 0.01,
                  'class': 'rec',
                  'direction': 1,
                  'dropout': 0.1,
                  'from': ['fwd_lstm_5', 'bwd_lstm_5'],
                  'n_out': 512,
                  'unit': 'nativelstm2'},
  # add max_pool_2 to increase subsampling
  'max_pool_3': {'class': 'pool', 'from': ['fwd_lstm_3', 'bwd_lstm_3'], 'mode': 'max', 'padding': 'same', 'pool_size': (2,), 'trainable': False},
  'output': { 'class': 'softmax',
              'from': ['fwd_lstm_6', 'bwd_lstm_6'],
              'loss': 'fast_bw',
              # RASR: provide FSA of required segments to RETURNN for extended CTC loss
              'loss_opts': { 'sprint_opts': { 'minPythonControlVersion': 4,
                                              'numInstances': 2,
                                              'sprintConfigStr': '--config=sprint.loss.config --*.LOGFILE=nn-trainer.loss.log --*.TASK=1',
                                              'sprintExecPath': 'RASR.nn-trainer.linux-x86_64-standard',
                                              'usePythonSegmentOrder': False},
                             'tdp_scale': 0.0},
              'n_out': 1919, # num_outputs
              'target': None},
  'source': {'class': 'eval', 'eval': "self.network.get_config().typed_value('transform')(source(0, as_data=True), network=self.network)"}}
newbob_learning_rate_decay = 0.9
newbob_multi_num_epochs = 20
newbob_multi_update_interval = 1
num_epochs = 500
optimizer_epsilon = 1e-08
pretrain = 'default'
save_interval = 1
start_batch = 'auto'
start_epoch = 'auto'
target = 'classes'
task = 'train'

num_inputs = 50 # gt feature
num_outputs = 1919 # number labels including blank
# RASR: iter through corpus and provide features of segments to RETURNN
train = { 'class': 'ExternSprintDataset',
  'partitionEpoch': 20,
  'sprintConfigStr': '--config=sprint.train.config --*.LOGFILE=nn-trainer.train.log --*.TASK=1 --*.corpus.segment-order-shuffle=true '
                     '--*.segment-order-sort-by-time-length=true --*.segment-order-sort-by-time-length-chunk-size=1000',
  'sprintTrainerExecPath': 'RASR.nn-trainer.linux-x86_64-standard'}

dev = { 'class': 'ExternSprintDataset',
  'partitionEpoch': 1,
  'sprintConfigStr': '--config=sprint.cv.config --*.LOGFILE=nn-trainer.cv.log --*.TASK=1 --*.corpus.segment-order-shuffle=true '
                     '--*.segment-order-sort-by-time-length=true --*.segment-order-sort-by-time-length-chunk-size=1000',
  'sprintTrainerExecPath': 'RASR.nn-trainer.linux-x86_64-standard'}

truncation = -1
update_on_device = True
use_tensorflow = True
window = 1
config = {}

locals().update(**config)

# layer-wise pretrain
def pretrain_construction_algo(idx, net_dict, lstm_name='fwd_lstm', pool_name='max_pool'):
  # idx start at 0 and last BLSTM always present
  num_lstm_layers = idx + 2

  orig_num_lstm_layers = 0
  orig_num_pool_layers = 0
  full_red_factor = 1
  red_factor = 1
  last_pool = None
  while "%s_%i" %(lstm_name, orig_num_lstm_layers+1) in net_dict:
    orig_num_lstm_layers += 1
    if "%s_%i" %(pool_name, orig_num_lstm_layers) in net_dict:
      orig_num_pool_layers += 1
      last_pool = net_dict["%s_%i" %(pool_name, orig_num_lstm_layers)]
      factor = last_pool["pool_size"][0]
      full_red_factor *= factor
      if orig_num_lstm_layers < num_lstm_layers:
        red_factor *= factor  
  assert orig_num_lstm_layers >= 2
  assert orig_num_pool_layers > 0, 'no pool layers found, use default pretrain'
  assert full_red_factor > 1, 'no down-sampling applied, remove pool layers and use default pretrain'
  # no pooling on the last hidden output
  assert "%s_%i" %(pool_name, orig_num_lstm_layers) not in net_dict

  last_name = "%s_%i" %(lstm_name, orig_num_lstm_layers)

  # no dropout for the first iteration  
  if idx == 0:
    net_dict[last_name]['dropout'] = 0
    net_dict[last_name.replace('fwd','bwd')]['dropout'] = 0
 
  if num_lstm_layers > orig_num_lstm_layers:
    # full network already, start training
    num_lstm_layers = orig_num_lstm_layers
    assert full_red_factor == red_factor
    return None
  else:
    # last layer before the last hidden layer 
    name = "%s_%i" %(pool_name, num_lstm_layers-1)
    if name in net_dict:
      fromList = [name]
    else:
      name2 = "%s_%i" %(lstm_name, num_lstm_layers-1)
      fromList = [name2]
      if name2.replace('fwd','bwd') in net_dict:
        fromList += [name2.replace('fwd','bwd')]

    # keep same full reduction factor: increase last pool size (add if not present)
    if full_red_factor > red_factor:
      assert full_red_factor % red_factor == 0
      remain_factor = full_red_factor // red_factor
      if name not in net_dict:
        assert last_pool is not None
        net_dict[name] = dict(last_pool)
        net_dict[name]['from'] = fromList
        factor = 1
      else: factor = net_dict[name]['pool_size'][0]
      net_dict[name]['pool_size'] = (factor * remain_factor,)
      fromList = [name]

    # inter-connect layers
    net_dict[last_name]['from'] = fromList
    net_dict[last_name.replace('fwd','bwd')]['from'] = fromList
 
  # delete non-used lstm layers. This is not explicitly necessary but maybe nicer.
  for i in range(num_lstm_layers, orig_num_lstm_layers):
    name = "%s_%i" %(lstm_name, i)
    del net_dict[name]
    if name.replace('fwd','bwd') in net_dict:
      del net_dict[name.replace('fwd','bwd')]
    name = "%s_%i" %(pool_name, i)
    if name in net_dict:
      del net_dict[name]
  return net_dict

# how many (sub)epochs for one pretrain step #
# Note: turn off pretrain by set pretrain = False
pretrain = {'repetitions': [3, 3, 3, 3, 3, 3], 'construction_algo': pretrain_construction_algo}

# for debug only
def summary(name, x):
  """
  :param str name:
  :param tf.Tensor x: (batch,time,feature)
  """
  import tensorflow as tf
  # tf.summary.image wants [batch_size, height,  width, channels],
  # we have (batch, time, feature).
  img = tf.expand_dims(x, axis=3)  # (batch,time,feature,1)
  img = tf.transpose(img, [0, 2, 1, 3])  # (batch,feature,time,1)
  tf.summary.image(name, img, max_outputs=10)
  tf.summary.scalar("%s_max_abs" % name, tf.reduce_max(tf.abs(x)))
  mean = tf.reduce_mean(x)
  tf.summary.scalar("%s_mean" % name, mean)
  stddev = tf.sqrt(tf.reduce_mean(tf.square(x - mean)))
  tf.summary.scalar("%s_stddev" % name, stddev)
  tf.summary.histogram("%s_hist" % name, tf.reduce_max(tf.abs(x), axis=2))


def _mask(x, batch_axis, axis, pos, max_amount):
  """
  :param tf.Tensor x: (batch,time,feature)
  :param int batch_axis:
  :param int axis:
  :param tf.Tensor pos: (batch,)
  :param int|tf.Tensor max_amount: inclusive
  """
  import tensorflow as tf
  ndim = x.get_shape().ndims
  n_batch = tf.shape(x)[batch_axis]
  dim = tf.shape(x)[axis]
  amount = tf.random_uniform(shape=(n_batch,), minval=1, maxval=max_amount + 1, dtype=tf.int32)
  pos2 = tf.minimum(pos + amount, dim)
  idxs = tf.expand_dims(tf.range(0, dim), 0)  # (1,dim)
  pos_bc = tf.expand_dims(pos, 1)  # (batch,1)
  pos2_bc = tf.expand_dims(pos2, 1)  # (batch,1)
  cond = tf.logical_and(tf.greater_equal(idxs, pos_bc), tf.less(idxs, pos2_bc))  # (batch,dim)
  if batch_axis > axis:
    cond = tf.transpose(cond)  # (dim,batch)
  cond = tf.reshape(cond, [tf.shape(x)[i] if i in (batch_axis, axis) else 1 for i in range(ndim)])
  from TFUtil import where_bc
  x = where_bc(cond, 0.0, x)
  return x


def random_mask(x, batch_axis, axis, min_num, max_num, max_dims):
  """
  :param tf.Tensor x: (batch,time,feature)
  :param int batch_axis:
  :param int axis:
  :param int|tf.Tensor min_num:
  :param int|tf.Tensor max_num: inclusive
  :param int|tf.Tensor max_dims: inclusive
  """
  import tensorflow as tf
  n_batch = tf.shape(x)[batch_axis]
  if isinstance(min_num, int) and isinstance(max_num, int) and min_num == max_num:
    num = min_num
  else:
    num = tf.random_uniform(shape=(n_batch,), minval=min_num, maxval=max_num + 1, dtype=tf.int32)
  # https://github.com/tensorflow/tensorflow/issues/9260
  # https://timvieira.github.io/blog/post/2014/08/01/gumbel-max-trick-and-weighted-reservoir-sampling/
  z = -tf.log(-tf.log(tf.random_uniform((n_batch, tf.shape(x)[axis]), 0, 1)))
  _, indices = tf.nn.top_k(z, num if isinstance(num, int) else tf.reduce_max(num))
  # indices should be sorted, and of shape (batch,num), entries (int32) in [0,dim)
  # indices = tf.Print(indices, ["indices", indices, tf.shape(indices)])
  if isinstance(num, int):
    for i in range(num):
      x = _mask(x, batch_axis=batch_axis, axis=axis, pos=indices[:, i], max_amount=max_dims)
  else:
    _, x = tf.while_loop( cond=lambda i, _: tf.less(i, tf.reduce_max(num)),
                          body=lambda i, x: ( i + 1,
                                              tf.where( tf.less(i, num),
                                                        _mask(x, batch_axis=batch_axis, axis=axis, pos=indices[:, i], max_amount=max_dims),
                                                        x ) 
                                            ),
                          loop_vars=(0, x)
                        )
  return x


def transform(data, network):
  # to be adjusted (20-50%)
  max_time_num = 1
  max_time = 10

  max_feature_num = 5
  max_feature = 5

  # halved before this step
  conservatvie_step = 2000

  x = data.placeholder
  import tensorflow as tf
  # summary("features", x)
  step = network.global_train_step
  increase_flag = tf.where(tf.greater_equal(step, conservatvie_step), 0, 1)

  def get_masked():
    x_masked = x
    x_masked = random_mask( x_masked, batch_axis=data.batch_dim_axis, axis=data.time_dim_axis,
                            min_num=0, max_num=tf.maximum(tf.shape(x)[data.time_dim_axis]//(2*max_time), max_time_num) // (1+increase_flag),
                            max_dims=max_time
                          )
    x_masked = random_mask( x_masked, batch_axis=data.batch_dim_axis, axis=data.feature_dim_axis,
                            min_num=0, max_num=max_feature_num // (1+increase_flag),
                            max_dims=max_feature
                          )
    #summary("features_mask", x_masked)
    return x_masked
  x = network.cond_on_train(get_masked, lambda: x)
  return x


